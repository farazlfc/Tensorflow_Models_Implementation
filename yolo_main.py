# -*- coding: utf-8 -*-
"""YOLO_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0-OZ06uo3emHMnIR1_txqgmiE7lWA5q
"""

import tensorflow as tf
#import settings
import numpy as np
from tensorflow.keras.layers import Conv2D,MaxPool2D,Flatten,Dense,Dropout,ZeroPadding2D

def build_network(images, num_outputs = 7*7*25 ):
  #images is input as batch,height,width,channels -> n,448,448,3
                net = ZeroPadding2D(padding = (3,3),input_shape = (448,448,3))(images)   #data_format is channels_last as default, input_shape does not need batch size.
                #net = tf.pad(images, np.array([[0, 0], [3, 3], [3, 3], [0, 0]]), name = 'pad_1')  #depreceated, changes it to 454, 454
                net = Conv2D(filters = 64, kernel_size = 7, strides= 2, padding='valid')(net)    #(454 -7)/2 + 1 = 224,224,64
                net = MaxPool2D(2,strides = 2,padding = 'same')(net)     #112,112,64
                net = Conv2D(filters = 192, kernel_size = 3, strides= 1, padding='same')(net)   #114 - 3 + 1 = 112,192
                net = MaxPool2D(2,strides = 2,padding = 'same')(net)    #56,56,192
                net = Conv2D(filters = 128, kernel_size = 1, strides= 1, padding='valid')(net)  #56,56,128   #6  no padding required here?
                net = Conv2D(filters = 256, kernel_size = 3, strides= 1, padding='same')(net)  #56,56,256
                net = Conv2D(filters = 256, kernel_size = 1, strides= 1, padding='valid')(net)   #56,56,256     ^
                net = Conv2D(filters = 512, kernel_size = 3, strides= 1, padding='same')(net)   #56,56,512
                net = MaxPool2D(2,strides = 2,padding = 'same')(net)    #28,28, 512
                net = Conv2D(filters = 256, kernel_size = 1, strides= 1, padding='valid')(net)   #default is valid #28,28,256  #wont matter
                net = Conv2D(filters = 512, kernel_size = 3, strides= 1, padding='same')(net)   #28,28,512
                net = Conv2D(filters = 256, kernel_size = 1, strides= 1, padding='valid')(net)   #256
                net = Conv2D(filters = 512, kernel_size = 3, strides= 1, padding='valid')(net)   #512
                net = Conv2D(filters = 256, kernel_size = 1, strides= 1, padding='valid')(net)   #256
                net = Conv2D(filters = 512, kernel_size = 3, strides= 1, padding='valid')(net)   #512
                net = Conv2D(filters = 256, kernel_size = 1, strides= 1, padding='valid')(net)   #256
                net = Conv2D(filters = 512, kernel_size = 3, strides= 1, padding='valid')(net)   #512
                net = Conv2D(filters = 512, kernel_size = 1, strides= 1, padding='valid')(net)   #512
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='valid')(net)  #1024
                net = MaxPool2D(2,strides = 2,padding = 'same')(net)     #default is valid    #14,14
                net = Conv2D(filters = 512, kernel_size = 1, strides= 1, padding='valid')(net)  #14,14,512
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='same')(net)    #14,14,1024
                net = Conv2D(filters = 512, kernel_size = 1, strides= 1, padding='valid')(net)    #14,14,512
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='same')(net)    #14,14,1024
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='same')(net)   #14,14,1024
                net = ZeroPadding2D(padding = (1,1))(net)     #16,16,1024
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 2, padding='valid')(net)     #(16-3)//2 + 1 = 7,7,1024
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='same')(net)     #7,7,1024
                net = Conv2D(filters = 1024, kernel_size = 3, strides= 1, padding='same')(net)     #7,7,1024
                #net = tf.compat.v1.transpose(net, [0, 3, 1, 2])     #purpose? unnecessary....
                net = Flatten()(net);     
                net = Dense(512)(net)
                net = Dense(4096)(net)
                net = Dropout(0.2)(net)
                net = Dense(num_outputs)(net)
                return net

images = np.random.randint(10,90,(1,448,448,3))
images = tf.dtypes.cast(images, tf.float64)
temp = build_network(images)

temp.shape